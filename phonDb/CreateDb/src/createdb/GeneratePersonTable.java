/*
 * Copyright 2013 Harald Postner<harald at free-creations.de>.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package createdb;

import java.io.BufferedReader;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.IOException;
import java.io.PrintWriter;

/**
 *
 *
 * @see http://www.fakenamegenerator.com
 * @author Harald Postner<harald at free-creations.de>
 */
public class GeneratePersonTable {

  private final int maxCount = 20;
  private final int timeslotCount = 15;

  public GeneratePersonTable() throws FileNotFoundException, IOException {
    File inFile = new File("src/createdb/resources/FakeNames.csv");

    File outputDir = new File("sql");
    if (!outputDir.exists()) {
      throw new RuntimeException("output directory not found. >" + outputDir.getAbsolutePath() + "<");
    }
    if (!outputDir.isDirectory()) {
      throw new RuntimeException("is not a directory. >" + outputDir.getAbsolutePath() + "<");
    }
    File outFile = new File(outputDir, "populateExamplePersons.sql");
    PrintWriter output;
    output = new PrintWriter(outFile);
    makePrologue(output);
    int lineCount = 0;
    try (BufferedReader input = new BufferedReader(new FileReader(inFile))) {

      input.readLine(); // skip first line
      boolean eof = false;
      while (!eof) {
        String line = input.readLine();
        if (line == null) {
          eof = true;
        } else {
          if (lineCount >= maxCount) {
            eof = true;
          } else {
            processLine(output, line, lineCount);
            lineCount++;
          }
        }
      }
      input.close();
    }
    makeEpilogue(output, lineCount);
    output.close();
  }

  /**
   * @param args the command line arguments
   * @throws java.io.FileNotFoundException
   */
  public static void main(String[] args) throws FileNotFoundException, IOException {
    GeneratePersonTable generator = new GeneratePersonTable();
  }

  private void processLine(PrintWriter output, String line, int lineCount) {
    makePersonRecord(output, line, lineCount);
    makeAvailabilityRecords(output, lineCount);
  }

  private void makePersonRecord(PrintWriter output, String line, int lineCount) {
    CsvReader csv = new CsvReader(line);

    String outLine
            = "INSERT INTO \"APP\".\"PERSON\" VALUES ("
            + lineCount + "," +//  "PERSONID" INTEGER NOT NULL GENERATED BY DEFAULT AS IDENTITY,
            "'" + csv.item(3) + "'," +//  "FAMILIENNAME" VARCHAR(50), 
            "'" + csv.item(1) + "'," +//  "VORNAME" VARCHAR(50), 
            "'" + csv.item(0) + "'," +//  "HERRFRAU" VARCHAR(50), 
            "'" + csv.item(7) + "'," +//  "PLZ" VARCHAR(50), 
            "'" + csv.item(5) + "'," +//  "ORT" VARCHAR(50), 
            "'" + csv.item(4) + "'," +//  "STRASSE" VARCHAR(50), 
            "'" + csv.item(9) + "'," +//  "TELNR" VARCHAR(50), 
            "NULL," +//  "HANDY" VARCHAR(50), 
            "'" + csv.item(8) + "'," +//  "EMAIL" VARCHAR(50), 
            "NULL," +//  "ALTERSGRUPPE" VARCHAR(50), 
            "NULL," +//  "NOTIZ" VARCHAR(255), 
            "NULL," +//  "GEWUENSCHTEWERTUNG" VARCHAR(50), 
            "NULL," +//  "GEWUENSCHTEFUNKTION" VARCHAR(50), 
            "NULL," +//  "GEWUENSCHTERKOLLEGE" INTEGER, 
            "CURRENT_TIMESTAMP" +//  "LETZTEAENDERUNG" TIMESTAMP
            ");";

    output.println(outLine);
  }

  private void makePrologue(PrintWriter output) {
    output.println("/*");
    output.println("File generated with \"GeneratePersonTable.java\"");
    output.println("*/");
  }

  private void makeEpilogue(PrintWriter output, int lineCount) {
    output.println("--");
    output.println("ALTER TABLE \"APP\".\"PERSON\" ALTER COLUMN PERSONID RESTART WITH " + (lineCount + 1));
    output.println("--");
    output.println("/*");
    output.println("" + lineCount + " records written");
    output.println("*/");
  }

  private void makeAvailabilityRecords(PrintWriter output, int personId) {
    for (int timeslot = 1; timeslot <= timeslotCount; timeslot++) {
      String outLine
              = "INSERT INTO \"APP\".\"AVAILABILITY\" VALUES ("
              + "DEFAULT," +//  "VERFUEGID" INTEGER NOT NULL GENERATED BY DEFAULT AS IDENTITY,
              personId + "," +//  "PERSONID" INTEGER NOT NULL, 
              timeslot + "," +//  "ZEITID" INTEGER NOT NULL, 
              "1," +//  "VERFUEGBAR" INTEGER, 
              "CURRENT_TIMESTAMP" +//  "LETZTEAENDERUNG" TIMESTAMP
              ");";
      output.println(outLine);
    }
  }
}
