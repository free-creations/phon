/*
 * Copyright 2013 Harald Postner<harald at free-creations.de>.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package createdb;

import java.io.BufferedReader;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.IOException;
import java.io.PrintWriter;
import java.util.Date;

/**
 *
 *
 * @see http://www.fakenamegenerator.com
 * @author Harald Postner<harald at free-creations.de>
 */
public class GeneratePersonTable {

  private final int maxCount = 60;
  private final int timeSlotCount = 15; // must be the same as in "populateCoreTables.sql"

  private final double availabilty = 0.3;
  private final double teacherRatio = 0.1;
  private final double childrenRatio = 0.1;
  private final double teenagerRatio = 0.4;
  private final double meanTeamSize = 10;
  private final double wantsToBeInTeamRatio = 0.5;

  private final int teamMemberCount;

  public GeneratePersonTable() throws FileNotFoundException, IOException {
    teamMemberCount = (int) ((maxCount * wantsToBeInTeamRatio) / meanTeamSize);

    File inFile = new File("src/createdb/resources/FakeNames.csv");

    File outputDir = new File("sql");
    if (!outputDir.exists()) {
      throw new RuntimeException("output directory not found. >" + outputDir.getAbsolutePath() + "<");
    }
    if (!outputDir.isDirectory()) {
      throw new RuntimeException("is not a directory. >" + outputDir.getAbsolutePath() + "<");
    }
    File outFile = new File(outputDir, "populateExamplePersons.sql");
    PrintWriter output;
    output = new PrintWriter(outFile);
    makePrologue(output);
    int lineCount = 0;
    try (BufferedReader input = new BufferedReader(new FileReader(inFile))) {

      input.readLine(); // skip first line
      boolean eof = false;
      while (!eof) {
        String line = input.readLine();
        if (line == null) {
          eof = true;
        } else {
          if (lineCount >= maxCount) {
            eof = true;
          } else {
            processLine(output, line, lineCount);
            lineCount++;
          }
        }
      }
      input.close();
    }
    makeEpilogue(output, lineCount);
    output.close();
  }

  /**
   * @param args the command line arguments
   * @throws java.io.FileNotFoundException
   */
  public static void main(String[] args) throws FileNotFoundException, IOException {
    GeneratePersonTable generator = new GeneratePersonTable();
  }

  private void processLine(PrintWriter output, String line, int lineCount) {
    int personId = lineCount + 1;
    makePersonRecord(output, line, personId);
    makeAvailabilityRecords(output, personId);
  }

  private void makePersonRecord(PrintWriter output, String line, int personId) {
    CsvReader csv = new CsvReader(line);
    String age = randomAge();
    String jobType = "HELFER";
    boolean teacher = isTeacher();
    if (teacher) {
      age = "ERWACHSEN";
      jobType = "LEHRER";
    }

    String outLine
            = "INSERT INTO \"APP\".\"PERSON\" VALUES ("
            + personId + "," +//  "PERSONID" INTEGER NOT NULL GENERATED BY DEFAULT AS IDENTITY,
            "'" + csv.item(3) + "'," +//  "SURNAME" VARCHAR(50), 
            "'" + csv.item(1) + "'," +//  "GIVENNAME" VARCHAR(50), 
            gender(csv.item(0)) + "," +//  "GENDER" VARCHAR(50), 
            "'" + csv.item(7) + "'," +//  "ZIPCODE" VARCHAR(50), 
            "'" + csv.item(5) + "'," +//  "CITY" VARCHAR(50), 
            "'" + csv.item(4) + "'," +//  "STREET" VARCHAR(50), 
            "'" + csv.item(9) + "'," +//  "TELEFONE" VARCHAR(50), 
            "'" + randomMobile() + "'," +//  "MOBILE" VARCHAR(50), 
            "'" + csv.item(8) + "'," +//  "EMAIL" VARCHAR(50), 
            "'" + age + "'," +//  "AGEGRUPPE" VARCHAR(50), 
            "NULL," +//  "NOTICE" VARCHAR(255), 
            teamAssignment() + "," +//"TEAM" INTEGER, 
            "'" + jobType + "'," +//  "JOBTYPE" VARCHAR(50), 
            randomContestType() + "," +//  "CONTESTYPE" INTEGER, 
            "CURRENT_TIMESTAMP" +//  "LETZTEAENDERUNG" TIMESTAMP
            ");";

    output.println(outLine);
  }

  private String teamAssignment() {
    if (hasTeam()) {
      double random = Math.random();
      int team = ((int) (teamMemberCount * random)) + 1;
      return Integer.toString(team);
    } else {
      return "NULL";
    }
  }

  private boolean hasTeam() {
    double random = Math.random();
    return (random < wantsToBeInTeamRatio);
  }

  private String gender(String s) {
    switch (s) {
      case "female":
        return "'Fr.'";
      case "male":
        return "'Hr.'";
    }
    return "NULL";
  }

  private void makePrologue(PrintWriter output) {
    output.println("/*");
    output.println("File generated with \"GeneratePersonTable.java\" "+(new Date()));
    output.println("*/");
    output.println("DELETE FROM \"APP\".\"AVAILABILITY\";");
    output.println("DELETE FROM \"APP\".\"ALLOCATION\";");
    output.println("DELETE FROM \"APP\".\"PERSON\";");
    output.println("DELETE FROM \"APP\".\"TEAM\";");

    makeTeamRecords(output);

  }

  private void makeTeamRecords(PrintWriter output) {
    for (int i = 0; i < teamMemberCount; i++) {
      output.println("INSERT INTO \"APP\".\"TEAM\" VALUES("
              + String.format("%s,", i + 1) +//  "TEAMID" INTEGER NOT NULL GENERATED BY DEFAULT AS IDENTITY,
              String.format("'Team[%s]'", i + 1) + //"NAME" VARCHAR(50)
              ");");
    }
    output.println("ALTER TABLE \"APP\".\"TEAM\" "
            + "ALTER COLUMN \"TEAMID\" RESTART WITH " + (teamMemberCount + 1) + ";");
    output.println("");
    output.println("");
  }

  private void makeEpilogue(PrintWriter output, int lineCount) {
    output.println("--");
    output.println("ALTER TABLE \"APP\".\"PERSON\" "
            + "ALTER COLUMN PERSONID RESTART WITH " + (lineCount + 1) + ";");
    output.println("--");
    output.println("/*");
    output.println("" + lineCount + " records written");
    output.println("*/");

    output.println("INSERT INTO \"APP\".\"ALLOCATION\" VALUES("
            + "DEFAULT," +//"ALLOCATIONID" INTEGER NOT NULL GENERATED BY DEFAULT AS IDENTITY,
            "1," +//"PERSON" INTEGER NOT NULL,  -- who is allocated, foreign key into PERSON table
            "1," +//"EVENT" INTEGER NOT NULL, -- to which event is she/he allocated, foreign key into EVENT table
            "'LEHRER'," +//"JOB" VARCHAR(50), -- to which task is she/he allocated, , foreign key into JOB table
            "CURRENT_TIMESTAMP," +// "LASTCHANGE" TIMESTAMP, -- when was this record last changed
            "NULL," +//"PLANNER" VARCHAR(50), -- who did change this record the last time
            "NULL" +//"NOTE" VARCHAR(32000) -- some further notes
            ");");
  }

  private void makeAvailabilityRecords(PrintWriter output, int personId) {
    for (int timeSlot = 1; timeSlot <= timeSlotCount; timeSlot++) {
      String outLine
              = "INSERT INTO \"APP\".\"AVAILABILITY\" VALUES ("
              + "DEFAULT," +//  "VERFUEGID" INTEGER NOT NULL GENERATED BY DEFAULT AS IDENTITY,
              personId + "," +//  "PERSONID" INTEGER NOT NULL, 
              timeSlot + "," +//  "ZEITID" INTEGER NOT NULL, 
              isAvailable() + "," +//  "VERFUEGBAR" INTEGER, 
              "CURRENT_TIMESTAMP" +//  "LETZTEAENDERUNG" TIMESTAMP
              ");";
      output.println(outLine);
    }
  }

  private int isAvailable() {
    double random = Math.random();
    if (random < availabilty) {
      return 1;
    } else {
      return 0;
    }
  }

  private boolean isTeacher() {
    double random = Math.random();
    return (random < teacherRatio);
  }

  private String randomAge() {
    double random = Math.random();
    if (random < childrenRatio) {
      return "KIND";
    } else if (random < teenagerRatio) {
      return "JUGENDLICH";
    }
    return "ERWACHSEN";
  }

  private String randomMobile() {
    double random = Math.random();
    int n = (int) (9999999 * random);
    return "0152 " + n;

  }

  private String randomContestType() {
    double random = Math.random();
    int contest = (int) ((6 + 2) * random);
    switch (contest) {
      case 0:
        return "'KLAVIER'";
      case 1:
        return "'GESANG'";
      case 2:
        return "'HARFE'";
      case 3:
        return "'ENSEMBLE'";
      case 4:
        return "'POP'";
      case 5:
        return "'NEUEMUSIK'";
      default:
        return "NULL";
    }
  }

}
