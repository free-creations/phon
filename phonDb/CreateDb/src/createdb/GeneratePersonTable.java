/*
 * Copyright 2013 Harald Postner<harald at free-creations.de>.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package createdb;

import java.io.BufferedReader;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.IOException;
import java.io.PrintWriter;

/**
 *
 *
 * @see http://www.fakenamegenerator.com
 * @author Harald Postner<harald at free-creations.de>
 */
public class GeneratePersonTable {

  private final int maxCount = 60;
  private final int timeslotCount = 15; // must be the same as in "populateCoreTables.sql"

  private final double availabilty = 0.3;
  private final double teacherRatio = 0.1;
  private final double childrenRatio = 0.1;
  private final double teenagerRatio = 0.4;
  private final double meanGroupSize = 10;
  private final double wantsToBeInGroupRatio = 0.5;

  private final int groupCount;

  public GeneratePersonTable() throws FileNotFoundException, IOException {
    groupCount = (int) ((maxCount * wantsToBeInGroupRatio) / meanGroupSize);

    File inFile = new File("src/createdb/resources/FakeNames.csv");

    File outputDir = new File("sql");
    if (!outputDir.exists()) {
      throw new RuntimeException("output directory not found. >" + outputDir.getAbsolutePath() + "<");
    }
    if (!outputDir.isDirectory()) {
      throw new RuntimeException("is not a directory. >" + outputDir.getAbsolutePath() + "<");
    }
    File outFile = new File(outputDir, "populateExamplePersons.sql");
    PrintWriter output;
    output = new PrintWriter(outFile);
    makePrologue(output);
    int lineCount = 0;
    try (BufferedReader input = new BufferedReader(new FileReader(inFile))) {

      input.readLine(); // skip first line
      boolean eof = false;
      while (!eof) {
        String line = input.readLine();
        if (line == null) {
          eof = true;
        } else {
          if (lineCount >= maxCount) {
            eof = true;
          } else {
            processLine(output, line, lineCount);
            lineCount++;
          }
        }
      }
      input.close();
    }
    makeEpilogue(output, lineCount);
    output.close();
  }

  /**
   * @param args the command line arguments
   * @throws java.io.FileNotFoundException
   */
  public static void main(String[] args) throws FileNotFoundException, IOException {
    GeneratePersonTable generator = new GeneratePersonTable();
  }

  private void processLine(PrintWriter output, String line, int lineCount) {
    int personId = lineCount + 1;
    makePersonRecord(output, line, personId);
    makeAvailabilityRecords(output, personId);
  }

  private void makePersonRecord(PrintWriter output, String line, int personId) {
    CsvReader csv = new CsvReader(line);
    String age = randomAge();
    String function = "HELFER1";
    boolean teacher = isTeacher();
    if (teacher) {
      age = "ERWACHSEN";
      function = "LEHRER";
    }

    String outLine
            = "INSERT INTO \"APP\".\"PERSON\" VALUES ("
            + personId + "," +//  "PERSONID" INTEGER NOT NULL GENERATED BY DEFAULT AS IDENTITY,
            "'" + csv.item(3) + "'," +//  "FAMILIENNAME" VARCHAR(50), 
            "'" + csv.item(1) + "'," +//  "VORNAME" VARCHAR(50), 
            gender(csv.item(0)) + "," +//  "HERRFRAU" VARCHAR(50), 
            "'" + csv.item(7) + "'," +//  "PLZ" VARCHAR(50), 
            "'" + csv.item(5) + "'," +//  "ORT" VARCHAR(50), 
            "'" + csv.item(4) + "'," +//  "STRASSE" VARCHAR(50), 
            "'" + csv.item(9) + "'," +//  "TELNR" VARCHAR(50), 
            "'" + randomMobile() + "'," +//  "HANDY" VARCHAR(50), 
            "'" + csv.item(8) + "'," +//  "EMAIL" VARCHAR(50), 
            "'" + age + "'," +//  "ALTERSGRUPPE" VARCHAR(50), 
            "NULL," +//  "NOTIZ" VARCHAR(255), 
            "NULL," +//  "GEWUENSCHTEWERTUNG" VARCHAR(50), 
            "'" + function + "'," +//  "GEWUENSCHTEFUNKTION" VARCHAR(50), 
            "NULL," +//  "GEWUENSCHTERKOLLEGE" INTEGER, 
            groupAssignment() + "," +//"GROUP" INTEGER, 
            "CURRENT_TIMESTAMP" +//  "LETZTEAENDERUNG" TIMESTAMP
            ");";

    output.println(outLine);
  }

  private String groupAssignment() {
    if (hasGroup()) {
      double random = Math.random();
      int group = ((int) (groupCount * random)) + 1;
      return Integer.toString(group);
    } else {
      return "NULL";
    }
  }

  private boolean hasGroup() {
    double random = Math.random();
    return (random < wantsToBeInGroupRatio);
  }

  private String gender(String s) {
    switch (s) {
      case "female":
        return "'Fr.'";
      case "male":
        return "'Hr.'";
    }
    return "NULL";
  }

  private void makePrologue(PrintWriter output) {
    output.println("/*");
    output.println("File generated with \"GeneratePersonTable.java\"");
    output.println("*/");
    makeGroupRecords(output);
  }

  private void makeGroupRecords(PrintWriter output) {
    for (int i = 0; i < groupCount; i++) {
      output.println("INSERT INTO \"APP\".\"GROUP\" VALUES("
              + String.format("%s,", i + 1) +//  "GROUP" INTEGER NOT NULL GENERATED BY DEFAULT AS IDENTITY,
              String.format("'Group[%s]'", i + 1) + //"NAME" VARCHAR(50)
              ");");
    }
    output.println("ALTER TABLE \"APP\".\"GROUP\" "
            + "ALTER COLUMN \"GROUP\" RESTART WITH " + (groupCount + 1) + ";");
    output.println("");
    output.println("");
  }

  private void makeEpilogue(PrintWriter output, int lineCount) {
    output.println("--");
    output.println("ALTER TABLE \"APP\".\"PERSON\" "
            + "ALTER COLUMN PERSONID RESTART WITH " + (lineCount + 1) + ";");
    output.println("--");
    output.println("/*");
    output.println("" + lineCount + " records written");
    output.println("*/");

    output.println("INSERT INTO \"APP\".\"ALLOCATION\" VALUES("
            + "DEFAULT," +// --"ALLOCATIONID" INTEGER NOT NULL GENERATED BY DEFAULT AS IDENTITY,
            "1," +// --"ZEITID" INTEGER NOT NULL, 
            "1," +// --"CONTESTID" INTEGER NOT NULL, 
            "'LEHRER'," +// --"FUNKTIONID" VARCHAR(50) NOT NULL, 
            "1," +//  --"PERSONID" INTEGER NOT NULL, 
            "CURRENT_TIMESTAMP," +// --"LETZTEAENDERUNG" TIMESTAMP, 
            "NULL," +//  --"PLANER" VARCHAR(50), 
            "NULL" +// --"ERKLAERUNG" VARCHAR(32000)
            ");");

  }

  private void makeAvailabilityRecords(PrintWriter output, int personId) {
    for (int timeslot = 1; timeslot <= timeslotCount; timeslot++) {
      String outLine
              = "INSERT INTO \"APP\".\"AVAILABILITY\" VALUES ("
              + "DEFAULT," +//  "VERFUEGID" INTEGER NOT NULL GENERATED BY DEFAULT AS IDENTITY,
              personId + "," +//  "PERSONID" INTEGER NOT NULL, 
              timeslot + "," +//  "ZEITID" INTEGER NOT NULL, 
              isAvailable() + "," +//  "VERFUEGBAR" INTEGER, 
              "CURRENT_TIMESTAMP" +//  "LETZTEAENDERUNG" TIMESTAMP
              ");";
      output.println(outLine);
    }
  }

  private int isAvailable() {
    double random = Math.random();
    if (random < availabilty) {
      return 1;
    } else {
      return 0;
    }
  }

  private boolean isTeacher() {
    double random = Math.random();
    return (random < teacherRatio);
  }

  private String randomAge() {
    double random = Math.random();
    if (random < childrenRatio) {
      return "KIND";
    } else if (random < teenagerRatio) {
      return "JUGENDLICH";
    }
    return "ERWACHSEN";
  }

  private String randomMobile() {
    double random = Math.random();
    int n = (int) (9999999 * random);
    return "0152 " + n;

  }

}
