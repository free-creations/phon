/*
 * Copyright 2013 Harald Postner <Harald at free-creations.de>.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package de.free_creations.editors.person;

import de.free_creations.actions.person.JoinPersonInTeam;
import de.free_creations.dbEntities.Team;
import de.free_creations.dbEntities.Person;
import de.free_creations.nbPhon4Netbeans.PersonNode;
import de.free_creations.nbPhon4Netbeans.TeamNode;
import de.free_creations.nbPhonAPI.TeamCollection;
import de.free_creations.nbPhonAPI.DataBaseNotReadyException;
import de.free_creations.nbPhonAPI.Manager;
import de.free_creations.nbPhonAPI.PersonCollection;
import java.awt.datatransfer.UnsupportedFlavorException;
import java.beans.PropertyChangeEvent;
import java.beans.PropertyChangeListener;
import java.io.IOException;
import java.util.Objects;
import javax.swing.TransferHandler;
import org.openide.explorer.ExplorerManager;
import org.openide.explorer.view.BeanTreeView;
import org.openide.nodes.AbstractNode;
import org.openide.nodes.Children;
import org.openide.nodes.Node;
import org.openide.util.Exceptions;

/**
 * The PersonTeamPanel shows all persons who are in the same team as the given
 * person.
 *
 * @author Harald Postner <Harald at free-creations.de>
 */
public class PersonTeamPanel extends javax.swing.JPanel
        implements ExplorerManager.Provider {

  private final ExplorerManager explorerManager = new ExplorerManager();
  /**
   * The identity of the person who's team is currently been displayed *
   */
  private Integer personId = null;
  /**
   * The team Node that currently shows the team
   */
  private TeamNode teamNode = null;

  private final Node emptyNode = new AbstractNode(Children.LEAF);

  private final TransferHandler transferHandler = new TransferHandler() {
    @Override
    public boolean canImport(TransferHandler.TransferSupport support) {
      return support.isDataFlavorSupported(PersonNode.PERSON_NODE_FLAVOR);
    }

    @Override
    public boolean importData(TransferHandler.TransferSupport support) {
      try {
        Integer key = (Integer) support.getTransferable().getTransferData(PersonNode.PERSON_NODE_FLAVOR);
        JoinPersonInTeam action = new JoinPersonInTeam(key, personId);
        action.apply(0);
        return true;
      } catch (DataBaseNotReadyException | ClassCastException | UnsupportedFlavorException | IOException ex) {
        Exceptions.printStackTrace(ex);
        return false;
      }
    }
  };

  private final PropertyChangeListener personListener = new PropertyChangeListener() {

    @Override
    public void propertyChange(PropertyChangeEvent evt) {
      String propertyName = evt.getPropertyName();
      if (propertyName == null) {
        return;
      }
      switch (propertyName) {
        case (Person.PROP_TEAM):
          display(personId);
          break;
      }
    }
  };

  /**
   * Creates new form PersonGroupPanel
   */
  public PersonTeamPanel() {
    initComponents();
    if (java.beans.Beans.isDesignTime()) {
      return;
    }
    BeanTreeView beanTreeView = (BeanTreeView) scrollPane;
    beanTreeView.setRootVisible(false);
    beanTreeView.setDropTarget(false); // we'll not use the transfer handler from the TeamRoot node
    setTransferHandler(transferHandler);
  }

  public void setPersonId(Integer personId) {
    Integer old = this.personId;
    this.personId = personId;
    if (!Objects.equals(old, personId)) {
      if (old != null) {
        Person.removePropertyChangeListener(personListener, old);
      }
      if (personId != null) {
        Person.addPropertyChangeListener(personListener, personId);
      }
      display(personId);
    }
  }

  /**
   * This method is called from within the constructor to initialize the form.
   * WARNING: Do NOT modify this code. The content of this method is always
   * regenerated by the Form Editor.
   */
  @SuppressWarnings("unchecked")
  // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
  private void initComponents() {

    scrollPane = new BeanTreeView();

    javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
    this.setLayout(layout);
    layout.setHorizontalGroup(
      layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addComponent(scrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 160, Short.MAX_VALUE)
    );
    layout.setVerticalGroup(
      layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addComponent(scrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 159, Short.MAX_VALUE)
    );
  }// </editor-fold>//GEN-END:initComponents
  // Variables declaration - do not modify//GEN-BEGIN:variables
  private javax.swing.JScrollPane scrollPane;
  // End of variables declaration//GEN-END:variables

  @Override
  public ExplorerManager getExplorerManager() {
    return explorerManager;
  }

  private void display(Integer personId) {
    try {
      if (personId == null) {
        explorerManager.setRootContext(emptyNode);
        return;
      }
      PersonCollection pp = Manager.getPersonCollection();
      Person p = pp.findEntity(personId);
      if (p == null) {
        explorerManager.setRootContext(emptyNode);
        return;
      }
      Team team = p.getTeam();
      if (team == null) {
        explorerManager.setRootContext(emptyNode);
        return;
      }
      TeamCollection cc = Manager.getTeamCollection();
      if (teamNode != null) {
        teamNode.destroy();
      }
      teamNode = new TeamNode(team.getTeamId(), cc, pp);
      explorerManager.setRootContext(teamNode);
    } catch (DataBaseNotReadyException ex) {
      explorerManager.setRootContext(null);
    }
  }
}
