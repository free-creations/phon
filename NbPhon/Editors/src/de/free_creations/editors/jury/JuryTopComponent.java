/*
 * Copyright 2013 harald.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package de.free_creations.editors.jury;

import de.free_creations.dbEntities.Jury;
import de.free_creations.nbPhonAPI.DataBaseNotReadyException;
import de.free_creations.nbPhonAPI.JuryCollection;
import de.free_creations.nbPhonAPI.Manager;
import java.beans.PropertyChangeEvent;
import java.beans.PropertyChangeListener;
import java.util.Objects;
import org.netbeans.api.settings.ConvertAsProperties;
import org.openide.awt.ActionID;
import org.openide.awt.ActionReference;
import org.openide.util.Exceptions;
import org.openide.windows.TopComponent;
import org.openide.util.NbBundle.Messages;
import org.openide.windows.CloneableTopComponent;

/**
 * Top component which displays something.
 */
@ConvertAsProperties(
        dtd = "-//de.free_creations.editors.jury//Jury//EN",
        autostore = false)
@TopComponent.Description(
        preferredID = "JuryEditorTopComponent",
        iconBase = "de/free_creations/editors/jury/chairs.png",
        persistenceType = TopComponent.PERSISTENCE_NEVER)
@TopComponent.Registration(mode = "editor", openAtStartup = false)
@ActionID(category = "Window", id = "de.free_creations.editors.jury.JuryTopComponent")
@ActionReference(path = "Menu/Window" /*, position = 333 */)
@TopComponent.OpenActionRegistration(
        displayName = "#CTL_JuryAction",
        preferredID = "JuryEditorTopComponent")
@Messages({
  "CTL_JuryAction=Jury",
  "CTL_JuryTopComponent=Jury",
  "HINT_JuryTopComponent=This is a Jury window"
})
public final class JuryTopComponent extends CloneableTopComponent {

  private String currentKey = null;
  private final JuryCollection juryCollection = Manager.getJuryCollection();
  private final PropertyChangeListener listener = new PropertyChangeListener() {
    @Override
    public void propertyChange(PropertyChangeEvent evt) {
      Jury j = thisJury();
      if (j != null) {
        refreshView(j);
      }

    }
  };

  public JuryTopComponent() {
    initComponents();
    setName(Bundle.CTL_JuryTopComponent());
    //setToolTipText(Bundle.HINT_JuryTopComponent());

  }

  JuryTopComponent(String key) {
    this();
    viewJuryRecord(key);

  }

  /**
   * This method is called from within the constructor to initialize the form.
   * WARNING: Do NOT modify this code. The content of this method is always
   * regenerated by the Form Editor.
   */
  // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
  private void initComponents() {

    lblJuryId = new javax.swing.JLabel();
    edWertung = new javax.swing.JTextField();
    jLabel2 = new javax.swing.JLabel();
    edCategory = new javax.swing.JTextField();
    jLabel3 = new javax.swing.JLabel();
    edRaum = new javax.swing.JTextField();
    jLabel4 = new javax.swing.JLabel();
    jScrollPane1 = new javax.swing.JScrollPane();
    allocationTable = new de.free_creations.editors.jury.AllocationTable();
    jScrollPane2 = new javax.swing.JScrollPane();
    timeTable1 = new de.free_creations.editors.jury.TimeTable();

    org.openide.awt.Mnemonics.setLocalizedText(lblJuryId, org.openide.util.NbBundle.getMessage(JuryTopComponent.class, "JuryTopComponent.lblJuryId.text")); // NOI18N

    edWertung.setText(org.openide.util.NbBundle.getMessage(JuryTopComponent.class, "JuryTopComponent.edWertung.text")); // NOI18N
    edWertung.addFocusListener(new java.awt.event.FocusAdapter() {
      public void focusLost(java.awt.event.FocusEvent evt) {
        edWertungFocusLost(evt);
      }
    });

    org.openide.awt.Mnemonics.setLocalizedText(jLabel2, org.openide.util.NbBundle.getMessage(JuryTopComponent.class, "JuryTopComponent.jLabel2.text")); // NOI18N

    edCategory.setText(org.openide.util.NbBundle.getMessage(JuryTopComponent.class, "JuryTopComponent.edCategory.text")); // NOI18N

    org.openide.awt.Mnemonics.setLocalizedText(jLabel3, org.openide.util.NbBundle.getMessage(JuryTopComponent.class, "JuryTopComponent.jLabel3.text")); // NOI18N

    edRaum.setText(org.openide.util.NbBundle.getMessage(JuryTopComponent.class, "JuryTopComponent.edRaum.text")); // NOI18N
    edRaum.addFocusListener(new java.awt.event.FocusAdapter() {
      public void focusLost(java.awt.event.FocusEvent evt) {
        edRaumFocusLost(evt);
      }
    });

    org.openide.awt.Mnemonics.setLocalizedText(jLabel4, org.openide.util.NbBundle.getMessage(JuryTopComponent.class, "JuryTopComponent.jLabel4.text")); // NOI18N

    jScrollPane1.setViewportView(allocationTable);

    jScrollPane2.setViewportView(timeTable1);

    javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
    this.setLayout(layout);
    layout.setHorizontalGroup(
      layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGroup(layout.createSequentialGroup()
        .addContainerGap()
        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
          .addGroup(layout.createSequentialGroup()
            .addComponent(lblJuryId, javax.swing.GroupLayout.PREFERRED_SIZE, 117, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
          .addGroup(layout.createSequentialGroup()
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
              .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                  .addComponent(jLabel2)
                  .addComponent(jLabel3)
                  .addComponent(jLabel4))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                  .addComponent(edWertung)
                  .addGroup(layout.createSequentialGroup()
                    .addComponent(edCategory, javax.swing.GroupLayout.PREFERRED_SIZE, 192, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(0, 0, Short.MAX_VALUE))
                  .addComponent(edRaum)))
              .addComponent(jScrollPane2)
              .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.TRAILING))
            .addContainerGap())))
    );
    layout.setVerticalGroup(
      layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGroup(layout.createSequentialGroup()
        .addContainerGap()
        .addComponent(lblJuryId)
        .addGap(15, 15, 15)
        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
          .addComponent(jLabel2)
          .addComponent(edCategory, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        .addGap(18, 18, 18)
        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
          .addComponent(edWertung, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
          .addComponent(jLabel4))
        .addGap(18, 18, 18)
        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
          .addComponent(jLabel3)
          .addComponent(edRaum, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 155, javax.swing.GroupLayout.PREFERRED_SIZE)
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 365, javax.swing.GroupLayout.PREFERRED_SIZE)
        .addContainerGap(70, Short.MAX_VALUE))
    );
  }// </editor-fold>//GEN-END:initComponents

  private void edRaumFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_edRaumFocusLost
    Jury j = thisJury();
    if (j != null) {
      String oldS = noNull(j.getWertungsraum());
      String newS = edRaum.getText();
      if (!oldS.equals(newS)) {
        j.setWertungsraum(newS);
      }
    }
  }//GEN-LAST:event_edRaumFocusLost

  private void edWertungFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_edWertungFocusLost
    Jury j = thisJury();
    if (j != null) {
      String oldS = noNull(j.getWertung());
      String newS = edWertung.getText();
      if (!oldS.equals(newS)) {
        j.setWertung(newS);
      }
    }
  }//GEN-LAST:event_edWertungFocusLost
  // Variables declaration - do not modify//GEN-BEGIN:variables
  private de.free_creations.editors.jury.AllocationTable allocationTable;
  private javax.swing.JTextField edCategory;
  private javax.swing.JTextField edRaum;
  private javax.swing.JTextField edWertung;
  private javax.swing.JLabel jLabel2;
  private javax.swing.JLabel jLabel3;
  private javax.swing.JLabel jLabel4;
  private javax.swing.JScrollPane jScrollPane1;
  private javax.swing.JScrollPane jScrollPane2;
  private javax.swing.JLabel lblJuryId;
  private de.free_creations.editors.jury.TimeTable timeTable1;
  // End of variables declaration//GEN-END:variables

  @Override
  public void componentOpened() {
    // TODO add custom code on component opening
  }

  @Override
  public void componentClosed() {
    // TODO add custom code on component closing
  }

  void writeProperties(java.util.Properties p) {
    // better to version settings since initial version as advocated at
    // http://wiki.apidesign.org/wiki/PropertyFiles
    p.setProperty("version", "1.0");
    // TODO store your settings
  }

  void readProperties(java.util.Properties p) {
    String version = p.getProperty("version");
    // TODO read your settings according to their version
  }

  void viewJuryRecord(String newKey) {
    if (!Objects.equals(currentKey, newKey)) {
      Jury.removePropertyChangeListener(listener, currentKey);
      currentKey = newKey;

      Jury newJury = thisJury();
      if (newJury != null) {
        Jury.addPropertyChangeListener(listener, newKey);
        refreshView(newJury);
      }
      lblJuryId.setText(newKey);
      allocationTable.setJuryId(newKey);
    }
  }

  private Jury thisJury() {
    Jury j = null;
    try {
      j = juryCollection.findEntity(currentKey);
    } catch (DataBaseNotReadyException ex) {
      Exceptions.printStackTrace(ex);
    }
    return j;
  }

  private void refreshView(Jury jury) {
    assert (jury != null);
    String wertung = noNull(jury.getWertung()).trim();
    if (wertung.length() > 0) {
      setDisplayName(wertung);
    } else {
      setDisplayName(currentKey);
    }

    lblJuryId.setText(currentKey);
    edWertung.setText(noNull(jury.getWertung()));
    edRaum.setText(noNull(jury.getWertungsraum()));
    edCategory.setText(noNull(jury.getWertungstyp()));
  }

  private String noNull(String s) {
    if (s == null) {
      return "";
    } else {
      return s;
    }
  }
}
