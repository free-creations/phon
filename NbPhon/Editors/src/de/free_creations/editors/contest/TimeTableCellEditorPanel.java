/*
 * Copyright 2013 Harald Postner <Harald at free-creations.de>.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package de.free_creations.editors.contest;

import de.free_creations.dbEntities.Event;
import de.free_creations.dbEntities.Location;
import de.free_creations.dbEntities.TimeSlot;
import de.free_creations.nbPhonAPI.DataBaseNotReadyException;
import de.free_creations.nbPhonAPI.Manager;
import java.awt.Color;
import java.beans.PropertyChangeEvent;
import java.beans.PropertyChangeListener;
import java.util.Objects;

/**
 * Editor for one single cell of the "time table" shown in the contest edit
 * window.
 *
 * Each cell permits to edit for one single event entity and the attached
 * Location Entity.
 *
 * @author Harald Postner <Harald at free-creations.de>
 */
public class TimeTableCellEditorPanel extends javax.swing.JPanel {

  /**
   * Indicates that the value of displayed by this panel has changed.
   */
  public static final String PROP_VALUE_CHANGED = "PROP_VALUE_CHANGED";
  /**
   * @Todo move color management to a central place
   */
  private Color disabledColor;
  private Color selectedBackgroundColor;
  private Color selectedForegroundColor;

  /**
   * The identity of the event that is currently displayed.
   */
  private Integer eventId = Integer.MIN_VALUE;
  /**
   * The identity of the location that is currently displayed.
   */
  private Integer locationId = Integer.MIN_VALUE;
  private final PropertyChangeListener nodeListener = new PropertyChangeListener() {

    @Override
    public void propertyChange(PropertyChangeEvent evt) {
      showEvent();
      fireValueChanged();
    }
  };

  /**
   * Creates a TimeTableCellEditor with default colors (only for test)
   */
  public TimeTableCellEditorPanel() {
    this(new Color(170, 170, 170), new Color(57, 105, 138), Color.WHITE);
  }

  /**
   * Creates a TimeTableCellEditor and permits to define the colors for the
   * "selected" state (selected within the table).
   */
  public TimeTableCellEditorPanel(Color disabledColor, Color selectedBackgroundColor, Color selectedForegroundColor) {
    this.disabledColor = disabledColor;
    this.selectedBackgroundColor = selectedBackgroundColor;
    this.selectedForegroundColor = selectedForegroundColor;
    initComponents();
    if (!java.beans.Beans.isDesignTime()) {
      setEventId(null);
    }
  }

  /**
   * This method is called from within the constructor to initialize the form.
   * WARNING: Do NOT modify this code. The content of this method is always
   * regenerated by the Form Editor.
   */
  @SuppressWarnings("unchecked")
  // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
  private void initComponents() {

    btnCheck = new javax.swing.JCheckBox();
    lblTime = new javax.swing.JTextField();
    locationComboBox = new de.free_creations.editors.contest.LocationComboBox();

    setBackground(new java.awt.Color(255, 255, 255));
    setPreferredSize(new java.awt.Dimension(100, 43));

    btnCheck.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
    btnCheck.setSelected(true);
    org.openide.awt.Mnemonics.setLocalizedText(btnCheck, org.openide.util.NbBundle.getMessage(TimeTableCellEditorPanel.class, "TimeTableCellEditorPanel.btnCheck.text")); // NOI18N
    btnCheck.setOpaque(false);
    btnCheck.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        btnCheckActionPerformed(evt);
      }
    });

    lblTime.setText(org.openide.util.NbBundle.getMessage(TimeTableCellEditorPanel.class, "TimeTableCellEditorPanel.lblTime.text")); // NOI18N
    lblTime.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.LOWERED));

    javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
    this.setLayout(layout);
    layout.setHorizontalGroup(
      layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGroup(layout.createSequentialGroup()
        .addComponent(btnCheck)
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
        .addComponent(lblTime, javax.swing.GroupLayout.DEFAULT_SIZE, 96, Short.MAX_VALUE))
      .addComponent(locationComboBox, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
    );
    layout.setVerticalGroup(
      layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGroup(layout.createSequentialGroup()
        .addComponent(locationComboBox, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        .addGap(0, 0, 0)
        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
          .addComponent(lblTime)
          .addComponent(btnCheck, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)))
    );
  }// </editor-fold>//GEN-END:initComponents

  private void btnCheckActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCheckActionPerformed

    if (btnCheck.isSelected()) {

      lblTime.setEnabled(true);
    } else {

      lblTime.setEnabled(false);
    }
  }//GEN-LAST:event_btnCheckActionPerformed
  // Variables declaration - do not modify//GEN-BEGIN:variables
  private javax.swing.JCheckBox btnCheck;
  private javax.swing.JTextField lblTime;
  private de.free_creations.editors.contest.LocationComboBox locationComboBox;
  // End of variables declaration//GEN-END:variables

  private void setEventId(Integer newEventId) {
    Integer old = this.eventId;
    this.eventId = newEventId;
    if (!Objects.equals(old, newEventId)) {
      if (old != null) {
        Event.removePropertyChangeListener(nodeListener, newEventId);
      }
      if (newEventId != null) {
        Event.addPropertyChangeListener(nodeListener, newEventId);
      }

      showEvent();

    }
  }

  /**
   * same as "setEventId()", but the value can be anything.
   *
   * @param value if not an Integer enventId will be set to null.
   */
  public void setValue(Object value) {
    if (value instanceof Integer) {
      setEventId((Integer) value);
    } else {
      setEventId(null);
    }
  }

  /**
   * show the current locationId and eventId
   */
  private void showEvent() {
    Event event = null;
    try {
      event = Manager.getEventCollection().findEntity(eventId);
    } catch (DataBaseNotReadyException ignored) {
    }


    locationId = null; // provisional default
    if (event != null) {
      Location location = event.getLocation();
      if (location != null) {
        locationId = location.getLocationId();
      }
    }
    
    locationComboBox.setSelectedLocationId(locationId);

    String fromTo = "";
    boolean scheduled = false;

    if (event != null) {
      scheduled = event.isScheduled();
      TimeSlot ts = event.getTimeSlot();
      if (ts != null) {
        fromTo = String.format("%1$tH:%1$tM - %2$tH:%2$tM", ts.getStartTime(), ts.getEndTime());
      }
    }
    lblTime.setText(fromTo);
    btnCheck.setSelected(scheduled);
    btnCheckActionPerformed(null);
  }

  void setSelected(boolean selected) {
    if (selected) {
      setBackground(selectedBackgroundColor);
      setForeground(selectedForegroundColor);
    } else {
      setBackground(Color.WHITE);
      setForeground(Color.BLACK);
    }
  }

  /**
   * inform the surrounding table that something has changed and the panel needs
   * to be repainted.
   */
  private void fireValueChanged() {
   // firePropertyChange(PROP_VALUE_CHANGED, null, null);
  }

  public Integer getLocationId() {
    return locationId;
  }

  public Integer getEventId() {
    return eventId;
  }

}
